plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.dynamicwebservice'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.github.a09090443:base-spring-boot-starter:3.2.5.4'
    implementation 'io.github.a09090443:web-spring-boot-starter:3.2.5.1'
    implementation 'io.github.a09090443:db-spring-boot-starter:3.2.5.1'
    implementation 'io.github.a09090443:web-service-spring-boot-starter:3.2.5.2'

    implementation 'org.springframework.boot:spring-boot-devtools:3.2.5'
    implementation 'net.sf.jasperreports:jasperreports:6.20.6'
    implementation 'com.github.librepdf:openpdf:1.3.30'
    implementation 'org.eclipse.persistence:eclipselink:3.0.4'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'com.h2database:h2:2.2.220'
    implementation 'org.flywaydb:flyway-core:10.14.0'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register('buildAngular', Exec) {
    workingDir = file('../webservice-frontend').absolutePath
    environment 'PATH', file('../tools/node-v20.15.0-win-x64').absolutePath + File.pathSeparator + System.env.PATH
    commandLine 'npm.cmd', 'run', 'build', '--', '--configuration', 'production', '--base-href', '/webservice-server/'
}

tasks.register('copyAngularBuild', Copy) {
    dependsOn 'buildAngular'
    from '../webservice-frontend/dist'
    into 'src/main/resources/static'
}

def env = project.hasProperty('env') ? project.property('env') : 'dev'

tasks.named('bootJar') {
    dependsOn 'copyAngularBuild'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    doFirst {
        // Rename resources
        copy {
            from layout.buildDirectory.dir("resources/main")
            into layout.buildDirectory.dir("resources/main")
            include "resources_${env}.properties"
            rename "resources_${env}.properties", 'resources.properties'
        }

        // Rename data source
        copy {
            from layout.buildDirectory.dir("resources/main")
            into layout.buildDirectory.dir("resources/main")
            include "data-source_${env}.properties"
            rename "data-source_${env}.properties", 'data-source.properties'
        }

        // Delete unnecessary files
        delete {
            delete fileTree(layout.buildDirectory.dir("resources/main")) {
                include '**/resources_*.properties'
                include '**/data-source_*.properties'
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(["-parameters", "-Xlint:deprecation"])
    options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('processResources') {
    dependsOn 'copyAngularBuild'
}
